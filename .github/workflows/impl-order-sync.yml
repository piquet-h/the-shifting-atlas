name: Implementation Order (Sync + Validate + Finalize)

# Explicit permissions required:
# - repository-projects: write   -> needed to update GitHub Projects (Projects v2) fields via GraphQL in sync script
# - issues: write                -> label reconciliation / creation
# - contents: write              -> committing regenerated docs & JSON ordering file
# Keep the list tight (principle of least privilege).
permissions:
  contents: write
  issues: write
  repository-projects: write # Classic projects; Projects v2 still require PAT (classic) for user projects

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operation mode (apply|resequence|validate|finalize)'
        required: false
        default: 'apply'
      debounce_seconds:
        description: 'Override debounce for finalize (default 25)'
        required: false
        default: '25'
  push:
    paths:
      - 'roadmap/implementation-order.json'
      - 'scripts/sync-implementation-order.mjs'
      - '.github/workflows/impl-order-sync.yml'
      - '.github/copilot-instructions.md'
      - 'scripts/assign-impl-order.mjs'
  pull_request:
    paths:
      - 'roadmap/implementation-order.json'
      - 'scripts/sync-implementation-order.mjs'
      - '.github/workflows/impl-order-sync.yml'
      - 'scripts/assign-impl-order.mjs'
  schedule:
    - cron: '23 5 * * *' # Daily validation (from former impl-order-validate.yml)
  issues:
    types: [opened, edited, labeled, unlabeled, milestoned, demilestoned, reopened]

jobs:
  sync:
    # Runs on push (ordering file / scripts), manual apply/resequence, and PR validation
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode != 'finalize' && github.event.inputs.mode != 'validate') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install minimal deps
        run: npm ci --omit=dev || true
      - name: Select token (PROJECTS_TOKEN overrides GITHUB_TOKEN)
        id: token
        uses: ./.github/actions/select-project-token
        with:
          projects_token: ${{ secrets.PROJECTS_TOKEN }}
      - name: Token diagnostics
        run: |
          echo "Token source: ${{ steps.token.outputs.source }}"
          echo "Preflight: ${{ steps.token.outputs.preflight }}"
          echo "Token length: ${#TOK:0}"
        env:
          TOK: ${{ steps.token.outputs.value }}
      - name: Sync / Apply
        id: run-sync
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.value }}
          ALLOW_MISSING_PROJECT: 'false'
        run: |
          set -e
          if [ "${{ github.event_name }}" = "push" ]; then
            if node scripts/sync-implementation-order.mjs validate; then echo "APPLY_PERFORMED=false" >> $GITHUB_ENV; else node scripts/sync-implementation-order.mjs apply; echo "APPLY_PERFORMED=true" >> $GITHUB_ENV; fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            node scripts/sync-implementation-order.mjs validate; echo "APPLY_PERFORMED=false" >> $GITHUB_ENV
          else
            MODE="${{ github.event.inputs.mode }}"; node scripts/sync-implementation-order.mjs "$MODE"; if [ "$MODE" = "apply" ] || [ "$MODE" = "resequence" ]; then echo "APPLY_PERFORMED=true" >> $GITHUB_ENV; else echo "APPLY_PERFORMED=false" >> $GITHUB_ENV; fi
          fi
          # Emit step output for conditional usage
          if grep -q 'APPLY_PERFORMED=true' "$GITHUB_ENV"; then echo 'apply_performed=true' >> $GITHUB_OUTPUT; else echo 'apply_performed=false' >> $GITHUB_OUTPUT; fi
      - name: Ensure required type labels exist
        if: ${{ steps.run-sync.outputs.apply_performed == 'true' }}
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.value }}
        run: node scripts/sync-labels.mjs || echo "Label sync skipped"
      - name: Commit regenerated docs
        if: ${{ steps.run-sync.outputs.apply_performed == 'true' }}
        run: |
          if git diff --quiet docs/roadmap.md roadmap/implementation-order.json; then echo "No doc changes"; exit 0; fi
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add docs/roadmap.md roadmap/implementation-order.json
          git commit -m 'chore(roadmap): sync implementation order' || echo 'Nothing to commit'
          git push || echo 'Push failed'

  validate:
    # Daily schedule + manual validate mode
    if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'validate') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install root dependencies (prod only)
        run: npm ci --omit=dev || npm ci
      - name: Determine strict mode
        id: mode
        run: |
          if [ "${{ github.repository_owner }}" = "piquet-h" ]; then echo "strict=true" >> $GITHUB_OUTPUT; else echo "strict=false" >> $GITHUB_OUTPUT; fi
      - name: Run validation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ALLOW_MISSING_PROJECT: ${{ steps.mode.outputs.strict == 'true' && 'false' || 'true' }}
        run: |
          set -e
          if [ "${{ steps.mode.outputs.strict }}" = "true" ]; then node scripts/sync-implementation-order.mjs validate; else if node scripts/sync-implementation-order.mjs validate; then echo 'Validation succeeded'; else echo 'Skipping failure due to fork context'; fi; fi
      - name: Summarize
        if: always()
        run: |
          echo '## Implementation Order Validation' >> $GITHUB_STEP_SUMMARY
          echo '* Strict mode: ${{ steps.mode.outputs.strict }}' >> $GITHUB_STEP_SUMMARY

  finalize:
    # Debounced batch ensure-all-issues (issue events or manual finalize mode)
    if: ${{ github.event_name == 'issues' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'finalize') }}
    runs-on: ubuntu-latest
    steps:
      - name: Debounce wait
        run: |
          SECS='${{ github.event.inputs.debounce_seconds || '25' }}'
          echo "Sleeping ${SECS}s to debounce burst of issue events..."; sleep "$SECS"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install Dependencies (minimal)
        run: npm ci --omit=dev || npm install --only=production || true
      - name: Select token
        id: token
        uses: ./.github/actions/select-project-token
        with:
          projects_token: ${{ secrets.PROJECTS_TOKEN }}
      - name: Token diagnostics
        run: |
          echo "Token source: ${{ steps.token.outputs.source }}"
          echo "Preflight: ${{ steps.token.outputs.preflight }}"
          echo "Token length: ${#TOK:0}"
        env:
          TOK: ${{ steps.token.outputs.value }}
      - name: Ensure all open issues present
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.value }}
        run: node scripts/ensure-all-issues-in-order.mjs || echo 'No changes or script degraded'
      - name: Sync & Regenerate Docs
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.value }}
          ALLOW_MISSING_PROJECT: 'true'
        run: node scripts/sync-implementation-order.mjs apply || echo 'Sync failed (non-fatal)'
      - name: Commit & Push (if changes)
        run: |
          set -euo pipefail
          if git diff --quiet roadmap/implementation-order.json docs/roadmap.md; then echo 'No changes to commit'; exit 0; fi
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add roadmap/implementation-order.json docs/roadmap.md
          git commit -m 'chore: impl-order: batch finalize' || echo 'Nothing to commit after add'
          git push || echo 'Push failed'
