name: Frontend Static Web App Deploy

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual redeploy reason'
        required: false

permissions:
  id-token: write # OIDC for azure/login
  contents: read

concurrency:
  group: swa-frontend
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  # Repository Variables expected:
  #   AZURE_SUBSCRIPTION_ID, AZURE_RESOURCE_GROUP, SWA_NAME (optional; derived from last infra deployment output if absent)
  # Required Secrets:
  #   AZURE_CLIENT_ID, AZURE_TENANT_ID (OIDC federated credentials configured in Azure AD)

jobs:
  build-and-deploy:
    name: Build & Deploy (main)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup workspace (composite)
        uses: ./.github/actions/node-workspace-setup

      - name: Build shared
        run: npm run build -w shared

      - name: Build frontend (Vite)
        run: npm run build -w frontend

      - name: Verify build artifacts
        run: |
          if [ ! -f frontend/dist/index.html ]; then
            echo "Expected Vite build output at frontend/dist missing." >&2; exit 1; fi
          if [ ! -f frontend/dist/staticwebapp.config.json ]; then
            echo "staticwebapp.config.json missing from frontend/dist (expected present)." >&2; exit 1; fi
          node scripts/verify-deployable.mjs
          echo "Artifacts validated."

      - name: Azure login (OIDC) for appsettings
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Derive SWA name from infra deployment output (if SWA_NAME unset)
        if: vars.SWA_NAME == ''
        env:
          RG: ${{ vars.AZURE_RESOURCE_GROUP }}
        run: |
          DEPLOY_NAME=$(az deployment group list --resource-group "$RG" --query "[?starts_with(name,'infra-')]|[-1].name" -o tsv 2>/dev/null || true)
          if [ -z "$DEPLOY_NAME" ]; then
            echo "No infra deployment (infra-*) found in resource group '$RG'. Run infrastructure workflow or set SWA_NAME variable." >&2; exit 1; fi
            echo "Found latest infra deployment: $DEPLOY_NAME"
          SWA=$(az deployment group show --resource-group "$RG" --name "$DEPLOY_NAME" --query "properties.outputs.staticWebAppName.value" -o tsv 2>/dev/null || true)
          if [ -z "$SWA" ]; then
            echo "Deployment $DEPLOY_NAME has no staticWebAppName output. Ensure Bicep outputs staticWebAppName or set SWA_NAME variable." >&2; exit 1; fi
          echo "Resolved SWA name from infra outputs: $SWA"
          echo "SWA_NAME=$SWA" >> $GITHUB_ENV

      - name: Validate Static Web App exists (fail-fast)
        run: |
          NAME="${{ vars.SWA_NAME }}"; if [ -n "$SWA_NAME" ]; then NAME="$SWA_NAME"; fi
          if ! az staticwebapp show --name "$NAME" >/dev/null 2>&1; then
            echo "Static Web App '$NAME' not found in subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}'." >&2
            az staticwebapp list -o table || true
            exit 1
          fi
          echo "Using Static Web App: $NAME"
          echo "SWA_NAME=$NAME" >> $GITHUB_ENV

      - name: Configure SWA AAD app settings (optional)
        env:
          AAD_CLIENT_ID: ${{ secrets.CUSTOMER_CLIENT_ID || secrets.AZURE_CLIENT_ID }}
          AAD_TENANT_ID: ${{ secrets.CUSTOMER_TENANT_ID || secrets.AZURE_TENANT_ID }}
          AAD_CLIENT_SECRET: ${{ secrets.CUSTOMER_SECRET || secrets.AZURE_CLIENT_SECRET }}
        run: |
          if [ -z "${SWA_NAME}" ] && [ -n "${{ vars.SWA_NAME }}" ]; then
            # Fallback to repository variable if env not yet exported
            SWA_NAME="${{ vars.SWA_NAME }}"
          fi
          if [ -z "$SWA_NAME" ]; then
            echo "SWA_NAME not resolved prior to app settings step." >&2; exit 1; fi
          ARGS="AAD_CLIENT_ID=$AAD_CLIENT_ID AAD_TENANT_ID=$AAD_TENANT_ID"
          if [ -n "$AAD_CLIENT_SECRET" ]; then
            ARGS="$ARGS AAD_CLIENT_SECRET=$AAD_CLIENT_SECRET"
          fi
          echo "Applying app settings to $SWA_NAME"
          az staticwebapp appsettings set --name "$SWA_NAME" --setting-names $ARGS

      - name: Deploy (production via Azure CLI)
        run: |
          echo "Ensuring Static Web Apps CLI extension present..."
          if ! az extension show --name staticwebapp >/dev/null 2>&1; then
            az extension add --name staticwebapp --yes
          else
            az extension update --name staticwebapp || true
          fi
          echo "Deploying production build for '$SWA_NAME' using 'az staticwebapp deploy'..."
          if ! az staticwebapp deploy --name "$SWA_NAME" --source frontend/dist --verbose; then
            echo "az staticwebapp deploy failed." >&2; exit 1; fi

  preview:
    name: Preview Environment (PR)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup workspace (composite)
        uses: ./.github/actions/node-workspace-setup

      - name: Build shared
        run: npm run build -w shared

      - name: Build frontend (Vite)
        run: npm run build -w frontend

      - name: Verify preview artifacts
        run: |
          if [ ! -f frontend/dist/index.html ]; then echo "Missing build output" >&2; exit 1; fi
          if [ ! -f frontend/dist/staticwebapp.config.json ]; then echo "Missing staticwebapp.config.json" >&2; exit 1; fi

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Static Web App exists (fail-fast)
        run: |
          NAME="${{ vars.SWA_NAME }}"; if [ -n "$SWA_NAME" ]; then NAME="$SWA_NAME"; fi
          if ! az staticwebapp show --name "$NAME" >/dev/null 2>&1; then
            echo "Static Web App '$NAME' not found (preview)." >&2
            az staticwebapp list -o table || true
            exit 1
          fi
          echo "Using Static Web App: $NAME"
          echo "SWA_NAME=$NAME" >> $GITHUB_ENV

      - name: Deploy Preview (Azure CLI)
        run: |
          echo "Ensuring Static Web Apps CLI extension present (preview)..."
          if ! az extension show --name staticwebapp >/dev/null 2>&1; then
            az extension add --name staticwebapp --yes
          else
            az extension update --name staticwebapp || true
          fi
          ENV_NAME="pr${{ github.event.number }}"
          echo "Deploying preview build to environment $ENV_NAME for '$SWA_NAME'..."
          if ! az staticwebapp deploy --name "$SWA_NAME" --source frontend/dist --deployment-environment "$ENV_NAME" --verbose; then
            echo "Preview deploy failed." >&2; exit 1; fi

  preview-cleanup:
    name: Cleanup Preview (PR Closed)
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Delete preview environment
        run: |
          npm install -g @azure/static-web-apps-cli@2
          ENV_NAME="pr${{ github.event.number }}"
          echo "Attempting to delete preview environment $ENV_NAME (best-effort)."
          # CLI currently lacks a direct delete subcommand; using REST API as fallback if needed.
          # Placeholder for future deletion logic if supported.
          echo "(No-op) Ensure stale preview $ENV_NAME is cleaned up manually if the service doesn't auto-expire it."
