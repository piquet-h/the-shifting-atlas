name: Frontend Static Web App Deploy

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual redeploy reason'
        required: false

permissions:
  id-token: write # OIDC for azure/login
  contents: read
  packages: read

concurrency:
  group: swa-frontend-prod
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  # Repository Variables expected:
  #   AZURE_SUBSCRIPTION_ID, AZURE_RESOURCE_GROUP, SWA_NAME (optional; derived from last infra deployment output if absent)
  # Required Secrets:
  #   AZURE_CLIENT_ID, AZURE_TENANT_ID (OIDC federated credentials configured in Azure AD)

jobs:
  build-and-deploy-prod:
    name: Build & Deploy (Production)
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Consolidated setup + install via composite action
      - name: Setup Node & Install frontend
        uses: ./.github/actions/setup-node-install
        with:
          working-directory: frontend
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend (Vite)
        run: cd frontend && npm run build

      - name: Resolve SWA Name
        id: swa_name
        run: |
          if [ -n "${{ vars.SWA_NAME }}" ]; then echo "SWA_NAME=${{ vars.SWA_NAME }}" >> $GITHUB_ENV; fi
          if [ -z "${{ vars.SWA_NAME }}" ]; then
            echo "::warning title=Missing SWA_NAME::Repository variable SWA_NAME not set. Deployment may fail if name required.";
          fi

      - name: Azure login (OIDC) for app settings
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure SWA AAD app settings (optional)
        env:
          SWA_NAME: ${{ env.SWA_NAME }}
          AAD_CLIENT_ID: ${{ secrets.CUSTOMER_CLIENT_ID || secrets.AZURE_CLIENT_ID }}
          AAD_TENANT_ID: ${{ secrets.CUSTOMER_TENANT_ID || secrets.AZURE_TENANT_ID }}
          AAD_CLIENT_SECRET: ${{ secrets.CUSTOMER_SECRET || secrets.AZURE_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          if [ -z "${SWA_NAME:-}" ]; then
            echo "No SWA_NAME available; skipping app settings."; exit 0; fi
          kv_pairs=()
          [ -n "${AAD_CLIENT_ID}" ] && kv_pairs+=("AAD_CLIENT_ID=${AAD_CLIENT_ID}")
          [ -n "${AAD_TENANT_ID}" ] && kv_pairs+=("AAD_TENANT_ID=${AAD_TENANT_ID}")
            # Only set secret if provided (avoid empty overwrite)
          [ -n "${AAD_CLIENT_SECRET}" ] && kv_pairs+=("AAD_CLIENT_SECRET=${AAD_CLIENT_SECRET}")
          if [ ${#kv_pairs[@]} -eq 0 ]; then
            echo "No non-empty AAD settings to apply."; exit 0; fi
          echo "Applying ${#kv_pairs[@]} app settings to ${SWA_NAME}";
          az staticwebapp appsettings set --name "${SWA_NAME}" --setting-names "${kv_pairs[@]}"

      - name: Preflight - Validate deployment token (Production)
        run: |
          if [ -z "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}" ]; then
            echo "::error title=Missing AZURE_STATIC_WEB_APPS_API_TOKEN::Secret not set. Obtain it from the Static Web App portal (Deployment token) and add to repository secrets.";
            exit 1;
          fi
          echo "Deployment token appears configured (redacted, length > 0)."

      - name: Preflight - Verify Static Web App exists
        if: env.SWA_NAME != ''
        env:
          SWA_NAME: ${{ env.SWA_NAME }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
        run: |
          set -euo pipefail
          echo "Verifying Static Web App '${SWA_NAME}' in subscription ${AZURE_SUBSCRIPTION_ID}..."
          # Try targeted RG first if provided, fallback to subscription-wide lookup.
          if [ -n "${AZURE_RESOURCE_GROUP:-}" ]; then
            if ! az staticwebapp show --name "${SWA_NAME}" --resource-group "${AZURE_RESOURCE_GROUP}" >/dev/null 2>&1; then
              echo "::warning title=SWA not found in specified resource group::Did not find ${SWA_NAME} in ${AZURE_RESOURCE_GROUP}. Falling back to subscription search.";
            else
              echo "Found ${SWA_NAME} in resource group ${AZURE_RESOURCE_GROUP}.";
            fi
          fi
          if ! az staticwebapp show --name "${SWA_NAME}" >/dev/null 2>&1; then
            echo "::error title=Static Web App not found::No Static Web App named ${SWA_NAME} was found in the current subscription. Check SWA_NAME repo variable or provision the resource.";
            exit 1
          fi
          echo "SWA existence verified. Proceeding to deploy."

      - name: Preflight - Verify deployment token matches portal (Production)
        if: env.SWA_NAME != ''
        env:
          SWA_NAME: ${{ env.SWA_NAME }}
          PROVIDED_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        run: |
          set -euo pipefail
          echo "Comparing provided deployment token with portal token for ${SWA_NAME}..."
          # Retrieve current portal token (apiKey). This requires appropriate RBAC (Contributor or Static Web App role).
          portal_token=$(az staticwebapp secrets list --name "${SWA_NAME}" --query properties.apiKey -o tsv 2>/dev/null || true)
          if [ -z "${portal_token}" ]; then
            echo "::warning title=Portal token retrieval failed::Could not retrieve current portal token via CLI (insufficient permissions or unsupported). Skipping comparison."; exit 0; fi
          if [ "${portal_token}" != "${PROVIDED_TOKEN}" ]; then
            echo "::error title=Deployment token mismatch::The secret AZURE_STATIC_WEB_APPS_API_TOKEN does not match the current portal deployment token. Regenerate (Azure Portal > Static Web App > Manage deployment token) and update the secret, or rotate both.";
            # Show hashes (truncated) for audit without leaking tokens.
            echo "Portal token hash:   $(echo -n "${portal_token}" | sha256sum | cut -c1-12)";
            echo "Provided token hash: $(echo -n "${PROVIDED_TOKEN}" | sha256sum | cut -c1-12)";
            exit 1;
          fi
          echo "Deployment token matches portal (hash: $(echo -n "${portal_token}" | sha256sum | cut -c1-12))."

      - name: Deploy to Azure Static Web Apps (Production)
        uses: Azure/static-web-apps-deploy@v1
        with:
          action: 'upload'
          app_location: 'frontend/dist'
          api_location: ''
          output_location: ''
          skip_app_build: true
          skip_api_build: true
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        env:
          DEBUG: true
          SWA_NAME: ${{ env.SWA_NAME }}
      - name: Diagnostic - Show SWA properties (post-action)
        run: |
          echo "Fetching properties for ${SWA_NAME} after deployment attempt..."
          az staticwebapp show --name "${SWA_NAME}" -o jsonc || echo "Failed to retrieve SWA properties."
