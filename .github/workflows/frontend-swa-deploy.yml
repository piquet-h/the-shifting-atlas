name: Frontend Static Web App Deploy

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual redeploy reason'
        required: false

permissions:
  id-token: write # OIDC for azure/login
  contents: read

concurrency:
  group: swa-frontend
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  # Expect these as repository variables (Settings > Variables > Actions):
  # AZURE_SUBSCRIPTION_ID, AZURE_RESOURCE_GROUP, SWA_NAME

jobs:
  build-and-deploy:
    name: Build & Deploy (main)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup workspace (composite)
        uses: ./.github/actions/node-workspace-setup

      - name: Build shared (ensure shared dist for vendoring)
        run: npm run build -w shared

      - name: Build frontend (Vite last to ensure config)
        run: npm run build -w frontend

      - name: Verify SWA config & artifacts
        run: |
          if [ ! -f frontend/dist/staticwebapp.config.json ]; then
            echo "staticwebapp.config.json missing from frontend/dist (expected present)." >&2; exit 1; fi
          node scripts/verify-deployable.mjs
          echo "Verified deployable artifacts."

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure SWA AAD app settings
        env:
          AAD_CLIENT_ID: ${{ secrets.CUSTOMER_CLIENT_ID }}
          AAD_TENANT_ID: ${{ secrets.CUSTOMER_TENANT_ID }}
          AAD_CLIENT_SECRET: ${{ secrets.CUSTOMER_SECRET }}
        run: |
          ARGS="AAD_CLIENT_ID=$AAD_CLIENT_ID AAD_TENANT_ID=$AAD_TENANT_ID"
          if [ -n "$AAD_CLIENT_SECRET" ]; then
            ARGS="$ARGS AAD_CLIENT_SECRET=$AAD_CLIENT_SECRET"
          fi
          az staticwebapp appsettings set --name "${{ vars.SWA_NAME }}" --setting-names $ARGS

      - name: Upload to Static Web App (production)
        # Using az cli since we rely on OIDC; this avoids needing the deployment token.
        run: |
          npm install -g @azure/static-web-apps-cli@2
          # Build output already produced: frontend/dist (functions hosted separately in unified backend)
          swa deploy \
            --app-name "${{ vars.SWA_NAME }}" \
            --env production \
            --app-location frontend/dist \
            --output-location '' \
            --verbose

  preview:
    name: Preview Environment (PR)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup workspace (composite)
        uses: ./.github/actions/node-workspace-setup

      - name: Build shared (ensure shared dist for vendoring)
        run: npm run build -w shared

      - name: Build frontend (Vite last to ensure config)
        run: npm run build -w frontend

      - name: Verify SWA config present
        run: |
          if [ ! -f frontend/dist/staticwebapp.config.json ]; then
            echo "staticwebapp.config.json missing from frontend/dist (expected present)." >&2; exit 1; fi
          echo "Verified staticwebapp.config.json present in dist."

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure SWA AAD app settings
        env:
          AAD_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AAD_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AAD_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          ARGS="AAD_CLIENT_ID=$AAD_CLIENT_ID AAD_TENANT_ID=$AAD_TENANT_ID"
          if [ -n "$AAD_CLIENT_SECRET" ]; then
            ARGS="$ARGS AAD_CLIENT_SECRET=$AAD_CLIENT_SECRET"
          fi
          az staticwebapp appsettings set --name "${{ vars.SWA_NAME }}" --setting-names $ARGS

      - name: Deploy Preview (OIDC only)
        run: |
          npm install -g @azure/static-web-apps-cli@2
          # Use PR number to create deterministic preview environment name.
          ENV_NAME="pr${{ github.event.number }}"
          echo "Deploying preview environment: $ENV_NAME"
          swa deploy \
            --app-name "${{ vars.SWA_NAME }}" \
            --env "$ENV_NAME" \
            --app-location frontend/dist \
            --output-location '' \
            --verbose

  preview-cleanup:
    name: Cleanup Preview (PR Closed)
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Delete preview environment
        run: |
          npm install -g @azure/static-web-apps-cli@2
          ENV_NAME="pr${{ github.event.number }}"
          echo "Attempting to delete preview environment $ENV_NAME (best-effort)."
          # CLI currently lacks a direct delete subcommand; using REST API as fallback if needed.
          # Placeholder for future deletion logic if supported.
          echo "(No-op) Ensure stale preview $ENV_NAME is cleaned up manually if the service doesn't auto-expire it."
