name: Publish Shared Package

on:
  push:
    paths:
      - 'shared/**'
      - '.github/workflows/publish-shared.yml'
    branches:
      - main
  workflow_dispatch:
    inputs:
      mode:
        description: 'publish mode (semver|explicit)'
        required: true
        default: 'semver'
      semverBump:
        description: 'patch|minor|major (used when mode=semver)'
        required: false
        default: 'patch'
      explicitVersion:
        description: 'Exact version (used when mode=explicit, e.g. 0.4.0)'
        required: false

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  version-and-publish:
    name: Version & Publish @piquet-h/shared
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: shared
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # used implicitly by setup-node for auth

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'shared/package-lock.json'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@piquet-h'

      - name: Install JavaScript dependencies
        run: npm ci

      - name: Build & test shared
        run: |
          npm run build
          npm test

      - name: Ensure working tree clean (no pre-existing version bump)
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo 'Working tree not clean before version bump:'
            git status --porcelain
            exit 1
          fi

      - name: Determine target version
        id: version
        run: |
          CURRENT=$(node -p "require('./package.json').version")
          MODE='${{ github.event.inputs.mode }}'
          if [ "$MODE" = "semver" ]; then
            BUMP='${{ github.event.inputs.semverBump }}'
            npm version ${BUMP:-patch} --no-git-tag-version
          elif [ "$MODE" = "explicit" ]; then
            EXPLICIT='${{ github.event.inputs.explicitVersion }}'
            if [ -z "$EXPLICIT" ]; then
              echo "Explicit mode selected but no explicitVersion provided"; exit 1
            fi
            if ! echo "$EXPLICIT" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "Invalid explicitVersion format: $EXPLICIT"; exit 1
            fi
            # Monotonic check (explicit must be greater than current)
            node -e "const current=require('./package.json').version; const target='${EXPLICIT}'; const cmp=(a,b)=>{const pa=a.split('.').map(Number), pb=b.split('.').map(Number); for(let i=0;i<3;i++){ if(pa[i]<pb[i]) return -1; if(pa[i]>pb[i]) return 1;} return 0;}; if(cmp(target,current)<=0){console.error(\"Explicit version ${target} must be greater than current ${current}\"); process.exit(1);}"
            npm version "$EXPLICIT" --no-git-tag-version
          else
            echo "Unknown mode $MODE"; exit 1
          fi
          NEW=$(node -p "require('./package.json').version")
          echo "newVersion=$NEW" >> $GITHUB_OUTPUT
          echo "Bumped version $CURRENT -> $NEW (mode=$MODE)"

      - name: Abort if target version already published
        run: |
          NEW='${{ steps.version.outputs.newVersion }}'
          if npm view @piquet-h/shared@"$NEW" version >/dev/null 2>&1; then
            echo "Version $NEW already published. Skipping commit/publish/tag."
            exit 0
          fi

      - name: Commit version bump
        run: |
          NEW_VERSION='${{ steps.version.outputs.newVersion }}'
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'
          git add package.json package-lock.json
          MODE='${{ github.event.inputs.mode }}'
          if [ "$MODE" = "explicit" ]; then
            git commit -m "chore(shared): release $NEW_VERSION (explicit)"
          else
            BUMP='${{ github.event.inputs.semverBump }}'
            git commit -m "chore(shared): release $NEW_VERSION (semver:${BUMP:-patch})"
          fi

      - name: Publish @piquet-h/shared
        run: npm publish

      - name: Create Git tag
        run: |
          NEW_VERSION='${{ steps.version.outputs.newVersion }}'
          git tag "shared-v$NEW_VERSION"
          git push origin HEAD:main --tags

      - name: Summary
        run: |
          echo "Published @piquet-h/shared@${{ steps.version.outputs.newVersion }}" >> $GITHUB_STEP_SUMMARY
