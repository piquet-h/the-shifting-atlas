name: Auto Assign Implementation Order

# Permissions rationale (align with impl-order-sync & roadmap-scheduler workflows):
# - contents: write          -> commit regenerated roadmap artifacts when high-confidence auto-apply occurs
# - issues: write            -> post analysis comments on medium/low confidence, create proposal issues (doc-drift)
# - repository-projects: write -> required to read/update Project V2 field values via GraphQL (Implementation order field)
#   NOTE: For user-owned Project V2, the default GITHUB_TOKEN may still lack scopes; provide PROJECTS_TOKEN (classic PAT
#   or fine‑grained PAT with project access) to elevate. The Select Token step prefers PROJECTS_TOKEN when present.

on:
  issues:
    types: [opened, edited, labeled, unlabeled, milestoned, demilestoned, reopened]
  pull_request:
    paths:
      - 'docs/**/*.md'
      - '.github/copilot-instructions.md'
      - 'shared/src/telemetryEvents.ts'
  workflow_dispatch:
    inputs:
      issue_number:
        description: Specific issue number to analyze
        # Manual dispatch requires explicit issue number.
        required: true
        type: string
      force_resequence:
        description: Force resequence even if current position seems acceptable
        required: false
        type: boolean

permissions:
  contents: write
  issues: write
  # Required for updating / reading Project v2 field values through GraphQL mutations.
  # Note: For some org/user project contexts the default GITHUB_TOKEN still lacks
  # sufficient scope; in that case provide a fine‑grained PAT in PROJECTS_TOKEN.
  repository-projects: write

# Concurrency:
# Per-issue / per-PR isolation so multiple distinct issues can process simultaneously while
# ensuring only the latest event for a SINGLE issue cancels previous in-flight work.
# The group key derives from the triggering entity (issue number, workflow_dispatch input, or PR number).
# This avoids earlier problem where a global group caused unrelated issues to starve/cancel.
concurrency:
  group: auto-impl-order-${{ github.repository }}-${{ (github.event_name == 'issues' && github.event.issue.number) || (github.event_name == 'workflow_dispatch' && github.event.inputs.issue_number) || (github.event_name == 'pull_request' && github.event.pull_request.number) || 'misc' }}
  cancel-in-progress: true

jobs:
  assign:
    if: github.event_name == 'issues' || github.event_name == 'workflow_dispatch'
    name: Analyze & Assign Implementation Order
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Need full history for safe rebase when concurrent automation commits occur
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Resolve Issue Number
        id: issue
        run: |
          # Resolve issue number based on trigger type.
          # For manual dispatch, the input is now required (enforced above); still guard just in case.
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -z "${{ github.event.inputs.issue_number }}" ]; then
              echo "::error::Manual dispatch requires 'issue_number' input." >&2
              exit 1
            fi
            echo "number=${{ github.event.inputs.issue_number }}" >> "$GITHUB_OUTPUT"
          else
            # Issue-triggered events should always have github.event.issue.number
            if [ -z "${{ github.event.issue.number }}" ]; then
              echo "::error::Could not resolve issue number from event payload." >&2
              exit 1
            fi
            echo "number=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Fetch Issue Details
        id: fetch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${{ steps.issue.outputs.number }}" ]; then
            echo "::error::Issue number not set; aborting fetch." >&2
            exit 1
          fi
          gh api repos/${{ github.repository }}/issues/${{ steps.issue.outputs.number }} > issue.json
          jq -r '.body // ""' issue.json > issue_body.txt
          echo "state=$(jq -r .state issue.json)" >> "$GITHUB_OUTPUT"
          echo "title=$(jq -r .title issue.json)" >> "$GITHUB_OUTPUT"
          echo "labels=$(jq -r '[.labels[].name] | join(",")' issue.json)" >> "$GITHUB_OUTPUT"
          echo "milestone=$(jq -r '.milestone.title // ""' issue.json)" >> "$GITHUB_OUTPUT"

      - name: Skip Closed Issues
        if: steps.fetch.outputs.state == 'closed'
        run: echo "Issue closed; skipping workflow." && exit 0

      - name: Select Token
        id: token
        uses: ./.github/actions/select-project-token
        with:
          projects_token: ${{ secrets.PROJECTS_TOKEN }}
      - name: Token diagnostics
        run: |
          echo "Token source: ${{ steps.token.outputs.source }}"
          echo "Preflight: ${{ steps.token.outputs.preflight }}"
          # Show token length safely (avoid invalid parameter expansion)
          echo "Token length: ${#TOK}"
        env:
          TOK: ${{ steps.token.outputs.value }}

      - name: Analyze & Assign Implementation Order
        id: analysis
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.value }}
        run: |
          set -euo pipefail
          # Run assign-impl-order.mjs to get recommendation with confidence scoring
          node scripts/assign-impl-order.mjs \
            --issue "${{ steps.issue.outputs.number }}" \
            --artifact ordering-decision.json

          # Extract key fields from the artifact (more robust than stdout capture)
          echo "confidence=$(jq -r .confidence ordering-decision.json)" >> "$GITHUB_OUTPUT"
          echo "recommended=$(jq -r .recommendedOrder ordering-decision.json)" >> "$GITHUB_OUTPUT"
          echo "changes=$(jq -r .changes ordering-decision.json)" >> "$GITHUB_OUTPUT"
          echo "score=$(jq -r .score ordering-decision.json)" >> "$GITHUB_OUTPUT"
          jq -r .rationale ordering-decision.json > rationale.txt
          echo "Confidence: $(jq -r .confidence ordering-decision.json), Score: $(jq -r .score ordering-decision.json)"

      - name: Upload Ordering Decision Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ordering-decision-${{ steps.issue.outputs.number }}
          path: ordering-decision.json
          retention-days: 30

      - name: Auto-Apply (High Confidence)
        if: steps.analysis.outputs.confidence == 'high' && steps.analysis.outputs.changes != '0'
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.value }}
        run: |
          set -euo pipefail
          echo "High confidence detected - auto-applying ordering changes"
          node scripts/assign-impl-order.mjs \
            --issue "${{ steps.issue.outputs.number }}" \
            --apply \
            --artifact ordering-decision-applied.json

      - name: Sync & Regenerate Docs
        if: steps.analysis.outputs.confidence == 'high' && steps.analysis.outputs.changes != '0'
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.value }}
          ALLOW_MISSING_PROJECT: 'true'
        run: node scripts/sync-implementation-order.mjs apply || echo "Sync degraded"

      - name: Calculate & Post Provisional Schedule
        if: steps.analysis.outputs.confidence == 'high' && steps.analysis.outputs.changes != '0'
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.value }}
          PROJECT_OWNER: ${{ github.repository_owner }}
          PROJECT_NUMBER: 3
        run: |
          set -euo pipefail
          echo "Calculating provisional schedule for issue #${{ steps.issue.outputs.number }}"
          node scripts/post-provisional-schedule.mjs \
            --issue "${{ steps.issue.outputs.number }}" \
            --apply || echo "Provisional schedule calculation failed (non-fatal)"

      - name: Commit & Push Changes
        if: steps.analysis.outputs.confidence == 'high' && steps.analysis.outputs.changes != '0'
        run: |
          set -euo pipefail
          if git diff --quiet roadmap/implementation-order.json docs/roadmap.md; then
            echo "No file changes to commit"
            exit 0
          fi

          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add roadmap/implementation-order.json docs/roadmap.md
          git commit -m "chore: auto-apply impl-order #${{ steps.issue.outputs.number }} (high confidence)" || echo "Nothing to commit after add (race)"

          # Retry push with rebase to handle concurrent workflow runs updating main.
          success=0
          for attempt in 1 2 3; do
            echo "Attempt ${attempt}: syncing with latest origin/main before push"
            # Always fetch first (already full history due to fetch-depth:0)
            git fetch origin main
            # Rebase; if it fails (conflict), fall back to an auto-merge (keeping both changes) and continue.
            if ! git rebase origin/main; then
              echo "Rebase failed (likely conflict). Attempting merge fast-forward or regular merge." >&2
              git rebase --abort || true
              git merge --no-edit origin/main || true
            fi
            if git push; then
              echo "Push succeeded on attempt ${attempt}."
              success=1
              break
            else
              echo "Push failed on attempt ${attempt}. Will retry after backoff." >&2
              sleep $((attempt * 2))
            fi
          done

          if [ "$success" -ne 1 ]; then
            echo "::warning::Failed to push after 3 attempts (likely high contention). Consider re-running the workflow." >&2
            # Do not fail the workflow; the ordering change can be retried safely.
          fi

      - name: Comment (Medium/Low Confidence)
        if: steps.analysis.outputs.confidence != 'high'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Build comment file
          {
            echo "**Implementation Order Auto-Assignment**" > comment.md
            echo "" >> comment.md
            echo "Confidence: \`${{ steps.analysis.outputs.confidence }}\`" >> comment.md
            echo "Recommended Order: \`${{ steps.analysis.outputs.recommended }}\`" >> comment.md
            echo "Priority Score: \`${{ steps.analysis.outputs.score }}\`" >> comment.md
            echo "Changes Required: \`${{ steps.analysis.outputs.changes }}\`" >> comment.md
            echo "" >> comment.md
            echo "Rationale:" >> comment.md
            echo "" >> comment.md
            cat rationale.txt >> comment.md || echo "(rationale missing)" >> comment.md
            echo "" >> comment.md
            if [ "${{ steps.analysis.outputs.confidence }}" = "low" ]; then
              echo "⚠️ Low confidence: Please add missing metadata (scope label, milestone, or type label) for better priority calculation." >> comment.md
              echo "" >> comment.md
            fi
            echo 'Review the ordering decision artifact for details. To apply manually, use `npm run assign:impl-order -- --issue ${{ steps.issue.outputs.number }} --apply`' >> comment.md
          } || echo "Comment assembly failed"
          gh issue comment ${{ steps.issue.outputs.number }} --body-file comment.md || echo "Comment failed"

      - name: Cleanup
        if: always()
        run: rm -f issue.json issue_body.txt ordering-decision.json ordering-decision-applied.json rationale.txt comment.md || true

  doc-drift:
    if: github.event_name == 'pull_request'
    name: Detect Reprioritisation Signals (Docs)
    runs-on: ubuntu-latest
    timeout-minutes: 6
    # Explicit minimal permissions needed for this job (do not rely on broader defaults):
    # - contents: read (fetch & diff)
    # - pull-requests: write (post PR comment)
    # - issues: write (optional future: create proposal issue)
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Resolve Base/Head Info
        run: |
          echo "Base ref: origin/${{ github.base_ref }}"
          echo "Head SHA: $GITHUB_SHA"
      - name: Analyze Doc Drift
        id: drift
        run: |
          set -euo pipefail
          if ! node scripts/analyze-doc-drift.mjs --base origin/${{ github.base_ref }} --head HEAD > drift.json 2>drift.stderr.log; then
            echo "::error::Doc drift analyzer failed. See stderr (first 120 lines) below:" >&2
            sed -n '1,120p' drift.stderr.log || true
            exit 1
          fi
          echo "action=$(jq -r .recommendedAction drift.json)" >> $GITHUB_OUTPUT
            echo "score=$(jq -r .scoreTotal drift.json)" >> $GITHUB_OUTPUT
          echo "Analyzer succeeded with action=$(jq -r .recommendedAction drift.json) score=$(jq -r .scoreTotal drift.json)"
      - name: Upload Drift Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: doc-drift-${{ github.run_id }}
          path: |
            drift.json
            drift.stderr.log
      - name: Comment on PR
        if: steps.drift.outputs.action != 'none'
        # Post an informational comment about detected documentation drift signals.
        # Hardened: failure to comment (permissions / forks) is downgraded to a warning so the job stays green.
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          node scripts/format-drift-comment.mjs drift.json > comment.md
          echo "" >> comment.md
          echo "⚠️ Note: Auto-resequencing from doc drift is not yet implemented. Manual review recommended." >> comment.md
          if ! gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md; then
            echo "::warning::Failed to post doc drift comment (likely permissions). Continuing without failing." >&2
          fi
      - name: Open Reprioritisation Proposal Issue
        if: steps.drift.outputs.action == 'resequence'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          title="Reprioritisation Proposal: PR #${{ github.event.pull_request.number }} ${GITHUB_HEAD_REF}" || title="Reprioritisation Proposal: PR #${{ github.event.pull_request.number }}"
          {
            echo "Automated detection suggests resequencing (score: $(jq -r .scoreTotal drift.json))."
            echo
            echo "⚠️ Note: Automated resequencing from doc drift is not yet implemented. Manual review required."
            echo
            echo "Raw JSON:"
            echo
            echo '```'
            cat drift.json
            echo '```'
          } > issue_body.md
          gh issue create --title "$title" --body-file issue_body.md --label scope:devx --label enhancement || echo "Issue creation skipped"
