name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: read
  packages: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changed Areas
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.changed.outputs.frontend }}
      a11y_changed: ${{ steps.changed.outputs.a11y }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Paths filter
        id: changed
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            a11y:
              - 'frontend/**'
              - 'docs/ux/**'
            backend:
              - 'backend/**'
            shared:
              - 'shared/**'

  lint-typecheck:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 12
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            shared/package-lock.json
            backend/package-lock.json
            frontend/package-lock.json
          registry-url: 'https://npm.pkg.github.com'
          scope: '@piquet-h'
          always-auth: true

      - name: Configure npm authentication
        run: |
          cat > $NPM_CONFIG_USERCONFIG << EOF
          @piquet-h:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Install root dependencies
        run: npm ci

      - name: Install shared dependencies
        run: cd shared && npm ci

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build shared (required for typecheck)
        run: cd shared && npm run build

      - name: Prelint dependency sanity
        run: npm run prelint

      - name: Lint
        run: npm run lint

      - name: Typecheck
        run: npm run typecheck

      - name: (Optional) Upload ESLint report placeholder
        if: failure()
        run: echo "Add ESLint report upload here if desired."

  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-typecheck
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            shared/package-lock.json
            backend/package-lock.json
            frontend/package-lock.json
          registry-url: 'https://npm.pkg.github.com'
          scope: '@piquet-h'
          always-auth: true

      - name: Configure npm authentication
        run: |
          cat > $NPM_CONFIG_USERCONFIG << EOF
          @piquet-h:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Install root dependencies
        run: npm ci

      - name: Install shared dependencies
        run: cd shared && npm ci

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build shared
        run: cd shared && npm run build

      - name: Build backend
        run: cd backend && npm run build

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Run tests
        run: npm test

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          if-no-files-found: ignore

  accessibility:
    name: Accessibility (axe)
    needs: [lint-typecheck, changes]
    if: ${{ needs.changes.outputs.a11y_changed == 'true' && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            shared/package-lock.json
            backend/package-lock.json
            frontend/package-lock.json
          registry-url: 'https://npm.pkg.github.com'
          scope: '@piquet-h'
          always-auth: true

      - name: Configure npm authentication
        run: |
          cat > $NPM_CONFIG_USERCONFIG << EOF
          @piquet-h:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Install shared dependencies
        run: cd shared && npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build shared
        run: cd shared && npm run build

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Axe scan
        run: cd frontend && npm run a11y

      - name: Upload axe report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: axe-report
          path: frontend/axe-report
          if-no-files-found: ignore

  summary:
    name: CI Summary
    needs: [lint-typecheck, tests, accessibility]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        run: |
          echo '## CI Summary' >> $GITHUB_STEP_SUMMARY
          echo '* Lint & Typecheck: ${{ needs.lint-typecheck.result }}' >> $GITHUB_STEP_SUMMARY
          echo '* Tests: ${{ needs.tests.result }}' >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.accessibility.result }}" != "" ]; then echo '* Accessibility: ${{ needs.accessibility.result }}' >> $GITHUB_STEP_SUMMARY; else echo '* Accessibility: (skipped)' >> $GITHUB_STEP_SUMMARY; fi
