name: E2E Integration Tests (Nightly)

# Revised Policy (2025-10-30):
#   - Removed execution on push / pull_request to reduce CI load.
#   - Runs once each evening via schedule IF there have been code commits today.
#   - Can still be invoked manually with workflow_dispatch.
# Assumption: "Evening" interpreted as 22:00 UTC (configurable) ‚Äì adjust cron if a different TZ is desired.

on:
  schedule:
    - cron: '0 22 * * *' # 22:00 UTC daily
  workflow_dispatch: {}

permissions:
  id-token: write # OIDC for azure/login
  contents: read
  packages: read

concurrency:
  group: e2e-nightly-${{ github.ref }}
  cancel-in-progress: true

jobs:
  precheck:
    name: Change Detection (Today)
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.changes.outputs.run }}
      count: ${{ steps.changes.outputs.count }}
      since: ${{ steps.changes.outputs.since }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Determine baseline (last e2e run)
        id: baseline
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflow_id = 'e2e-integration.yml';
            const currentRunId = context.runId;
            const runs = await github.rest.actions.listWorkflowRuns({ owner, repo, workflow_id, per_page: 10 });
            const prior = runs.data.workflow_runs.find(r => r.id !== currentRunId);
            let baseline;
            if (prior) {
              baseline = prior.run_started_at || prior.created_at;
              core.info(`Found prior run at ${baseline} (id ${prior.id})`);
            } else {
              // Fallback: 24h ago
              baseline = new Date(Date.now() - 24*60*60*1000).toISOString();
              core.info(`No prior run found, using fallback baseline ${baseline}`);
            }
            core.setOutput('baseline', baseline);
      - name: Detect commits since baseline
        id: changes
        run: |
          since='${{ steps.baseline.outputs.baseline }}'
          echo "Baseline timestamp: $since"
          echo "Collecting changed files since baseline (all):"
          git diff --name-only "$since"...HEAD > all_changed.txt || true
          cat all_changed.txt
          total_commits=$(git rev-list --count HEAD --since="$since")
          echo "Total commits since baseline: $total_commits"

          # Filter out documentation-only changes. We consider code changes if any file path starts with
          # backend/ shared/ frontend/ infrastructure/ scripts/ eslint-rules/ or .github/workflows/
          # (Adjust list easily as project evolves.)
          grep -E '^(backend/|shared/|frontend/|infrastructure/|scripts/|eslint-rules/|\.github/workflows/)' all_changed.txt > code_changed.txt || true
          # Remove pure markdown / docs-only changes that slipped through (e.g. a workflow doc) if they end with .md
          grep -v -E '\\.md$' code_changed.txt > code_non_md.txt || true

          code_files_count=$(grep -c '.' code_non_md.txt || true)
          echo "Code-impacting changed files count: $code_files_count"
          echo "List (after filtering docs/markdown):"
          cat code_non_md.txt || true

          if [ "$code_files_count" -gt 0 ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi
          echo "count=$code_files_count" >> $GITHUB_OUTPUT
          echo "since=$since" >> $GITHUB_OUTPUT
          echo "total_commits=$total_commits" >> $GITHUB_OUTPUT
          echo "filtered_paths=$(paste -sd, code_non_md.txt || true)" >> $GITHUB_OUTPUT

  e2e-cosmos:
    name: E2E Tests (Cosmos DB)
    needs: precheck
    if: needs.precheck.outputs.run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Test-specific Cosmos configuration (world-test graph in game database)
      GREMLIN_ENDPOINT_TEST: ${{ secrets.COSMOS_GREMLIN_ENDPOINT }}
      GREMLIN_DATABASE_TEST: game
      GREMLIN_GRAPH_TEST: world-test
      COSMOS_SQL_ENDPOINT_TEST: ${{ secrets.COSMOS_SQL_ENDPOINT }}
      # Cosmos SQL container configuration (shared game database, isolated by partition keys)
      COSMOS_SQL_DATABASE: game
      COSMOS_SQL_CONTAINER_PLAYERS: players
      COSMOS_SQL_CONTAINER_INVENTORY: inventory
      COSMOS_SQL_CONTAINER_LAYERS: descriptionLayers
      COSMOS_SQL_CONTAINER_EVENTS: worldEvents
      PERSISTENCE_MODE: cosmos
      PERSISTENCE_STRICT: 1
      NODE_ENV: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            shared/package-lock.json
            backend/package-lock.json
          registry-url: 'https://npm.pkg.github.com'
          scope: '@piquet-h'
          always-auth: true

      - name: Install shared dependencies
        run: cd shared && npm ci

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Build shared
        run: cd shared && npm run build

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Debug Environment Variables
        run: |
          echo "Checking required environment variables (length only, not values):"
          echo "GREMLIN_ENDPOINT_TEST length: ${#GREMLIN_ENDPOINT_TEST}"
          echo "GREMLIN_DATABASE_TEST: ${GREMLIN_DATABASE_TEST}"
          echo "GREMLIN_GRAPH_TEST: ${GREMLIN_GRAPH_TEST}"
          echo "COSMOS_SQL_ENDPOINT_TEST length: ${#COSMOS_SQL_ENDPOINT_TEST}"
          echo "PERSISTENCE_MODE: ${PERSISTENCE_MODE}"
          echo "PERSISTENCE_STRICT: ${PERSISTENCE_STRICT}"
          echo "NODE_ENV: ${NODE_ENV}"
          if [ -z "$GREMLIN_ENDPOINT_TEST" ]; then
            echo "::error::GREMLIN_ENDPOINT_TEST is empty or not set!"
          fi
          if [ -z "$COSMOS_SQL_ENDPOINT_TEST" ]; then
            echo "::error::COSMOS_SQL_ENDPOINT_TEST is empty or not set!"
          fi

      - name: Run E2E Tests
        id: e2e_tests
        run: |
          cd backend
          npm run test:e2e 2>&1 | tee e2e-output.log
          exit ${PIPESTATUS[0]}
        continue-on-error: true

      - name: Parse and Display Test Results
        if: always()
        run: |
          cd backend

          if [ ! -f e2e-output.log ]; then
            echo "::error::No test output file found"
            exit 1
          fi

          echo "## üß™ E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract test summary (tests X / pass Y / fail Z)
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -E "^# (tests|suites|pass|fail|cancelled|skipped|todo|duration_ms)" e2e-output.log | tail -8 >> $GITHUB_STEP_SUMMARY || echo "No summary found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract and check performance metrics
          echo "### ‚ö° Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract duration from summary
          SUITE_DURATION=$(grep "^# duration_ms" e2e-output.log | awk '{print $3}' || echo "0")
          SUITE_SECONDS=$(echo "scale=2; $SUITE_DURATION / 1000" | bc 2>/dev/null || echo "0")

          # Check if suite exceeded 90s target
          if [ $(echo "$SUITE_SECONDS > 90" | bc 2>/dev/null || echo "0") -eq 1 ]; then
            echo "‚ö†Ô∏è **Full suite: ${SUITE_SECONDS}s** (target: <90s) ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "::warning::E2E suite took ${SUITE_SECONDS}s, exceeding 90s target"
          else
            echo "‚úÖ **Full suite: ${SUITE_SECONDS}s** (target: <90s)" >> $GITHUB_STEP_SUMMARY
          fi

          # Look for logged performance metrics in test output
          if grep -q "Seeded.*locations in" e2e-output.log; then
            SEED_TIME=$(grep "Seeded.*locations in" e2e-output.log | grep -o "[0-9]\+ms" | head -1 || echo "N/A")
            echo "- World seeding: $SEED_TIME" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for p95 latency mentions
          if grep -q "p95" e2e-output.log; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**p95 Latency Measurements:**" >> $GITHUB_STEP_SUMMARY
            grep -i "p95" e2e-output.log | while read -r line; do
              echo "- $line" >> $GITHUB_STEP_SUMMARY
              
              # Extract numeric value and check against targets
              if echo "$line" | grep -qi "move"; then
                LATENCY=$(echo "$line" | grep -o "[0-9]\+ms" | grep -o "[0-9]\+" || echo "0")
                if [ "$LATENCY" -gt 500 ]; then
                  echo "  ‚ö†Ô∏è Exceeds 500ms target" >> $GITHUB_STEP_SUMMARY
                  echo "::warning::Move operation p95 latency ${LATENCY}ms exceeds 500ms target"
                fi
              elif echo "$line" | grep -qi "look"; then
                LATENCY=$(echo "$line" | grep -o "[0-9]\+ms" | grep -o "[0-9]\+" || echo "0")
                if [ "$LATENCY" -gt 200 ]; then
                  echo "  ‚ö†Ô∏è Exceeds 200ms target" >> $GITHUB_STEP_SUMMARY
                  echo "::warning::LOOK query p95 latency ${LATENCY}ms exceeds 200ms target"
                fi
              fi
            done
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "_No p95 performance metrics found in test output_" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Targets:** Full suite <90s ‚Ä¢ Move <500ms (p95) ‚Ä¢ LOOK <200ms (p95)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count failures
          FAIL_COUNT=$(grep "^# fail" e2e-output.log | awk '{print $3}' || echo "0")

          if [ "$FAIL_COUNT" != "0" ]; then
            echo "### ‚ùå Failed Tests ($FAIL_COUNT)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract failed test names and error details
            grep -B 2 "not ok" e2e-output.log | grep -E "(not ok|error:)" | head -30 >> $GITHUB_STEP_SUMMARY || true
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>üìã Failed Test Details</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -A 15 "not ok" e2e-output.log | head -100 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            
            # Create error annotations for each failed test
            grep "not ok" e2e-output.log | while read -r line; do
              TEST_NAME=$(echo "$line" | sed 's/not ok [0-9]* - //')
              echo "::error file=backend/test/e2e/cosmos.e2e.test.ts::E2E Test Failed: $TEST_NAME"
            done
          else
            echo "### ‚úÖ All Tests Passed" >> $GITHUB_STEP_SUMMARY
          fi

          # Always show recent output for context
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>üìÑ Recent Test Output (last 40 lines)</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -40 e2e-output.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Upload Full Test Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-output
          path: backend/e2e-output.log
          if-no-files-found: warn

      - name: Fail job if tests failed
        if: steps.e2e_tests.outcome == 'failure'
        run: |
          echo "::error::E2E tests failed - check summary above for details"
          exit 1

  e2e-summary:
    name: E2E Summary
    needs: [precheck, e2e-cosmos]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        run: |
          echo '## üß™ Nightly E2E Integration Tests Summary' >> $GITHUB_STEP_SUMMARY
          echo "_Schedule: 22:00 UTC daily (runs only if non-doc code changes since last run at ${{ needs.precheck.outputs.since }})_" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commits Today:** ${{ needs.precheck.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.precheck.outputs.run }}" != "true" ]; then
            echo "üîÑ Skipped: No qualifying code changes (doc-only or no changes)." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo "**Test Database:** Cosmos DB (world-test graph)" >> $GITHUB_STEP_SUMMARY
          echo "**Result:** ${{ needs.e2e-cosmos.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.e2e-cosmos.result }}" == "success" ]; then
            echo "‚úÖ All E2E tests passed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.e2e-cosmos.result }}" == "skipped" ]; then
            echo "‚ÑπÔ∏è Job skipped (unexpected state)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå E2E tests failed - check the test job above for detailed output" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üí° **Tip:** Failed test details are shown inline in the 'Parse and Display Test Results' step" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Performance Targets (p95):**" >> $GITHUB_STEP_SUMMARY
          echo "- Full suite: <90s" >> $GITHUB_STEP_SUMMARY
          echo "- Single move: <500ms" >> $GITHUB_STEP_SUMMARY
          echo "- LOOK query: <200ms" >> $GITHUB_STEP_SUMMARY
