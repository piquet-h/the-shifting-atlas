#!/usr/bin/env node
/* eslint-env node */
/* global process, console */
/**
 * Create or update variance alert issues.
 *
 * Usage:
 *   node scripts/create-variance-alert.mjs <variance> <issue-count> <period>
 *
 * Example:
 *   node scripts/create-variance-alert.mjs 0.32 12 2025-W02
 *
 * Environment:
 *   GITHUB_TOKEN - Required
 *   REPO_OWNER - Defaults to 'piquet-h'
 *   REPO_NAME - Defaults to 'the-shifting-atlas'
 */

import { trackVarianceAlert } from './shared/build-telemetry.mjs'

const REPO_OWNER = process.env.REPO_OWNER || 'piquet-h'
const REPO_NAME = process.env.REPO_NAME || 'the-shifting-atlas'

const token = process.env.GITHUB_TOKEN || process.env.GH_TOKEN
if (!token) {
    console.error('Missing GITHUB_TOKEN environment variable')
    process.exit(2)
}

// Parse arguments
const variance = Number(process.argv[2])
const issueCount = Number(process.argv[3])
const period = process.argv[4]

if (!variance || !issueCount || !period) {
    console.error('Usage: node scripts/create-variance-alert.mjs <variance> <issue-count> <period>')
    console.error('Example: node scripts/create-variance-alert.mjs 0.32 12 2025-W02')
    process.exit(1)
}

/**
 * Execute gh CLI command.
 * @private
 */
async function gh(args) {
    const { exec } = await import('child_process')
    const { promisify } = await import('util')
    const execPromise = promisify(exec)

    const cmd = `gh ${args}`
    const { stdout, stderr } = await execPromise(cmd, {
        env: { ...process.env, GH_TOKEN: token }
    })
    if (stderr) console.error('gh stderr:', stderr)
    return stdout.trim()
}

/**
 * Search for existing variance alert issue for the given period.
 */
async function findExistingAlert(period) {
    try {
        const result = await gh(
            `issue list --repo ${REPO_OWNER}/${REPO_NAME} --label "scope:observability" --label "variance-alert" --state open --json number,title --jq '.[] | select(.title | contains("${period}")) | .number'`
        )
        return result ? Number(result.split('\n')[0]) : null
    } catch (err) {
        return null
    }
}

/**
 * Generate alert issue body.
 */
function generateAlertBody(variance, issueCount, period) {
    const variancePct = (variance * 100).toFixed(1)
    const threshold = 25

    return `## ðŸ“Š Schedule Variance Alert - Week ${period}

**Median Variance:** ${variancePct}% (Threshold: ${threshold}%)  
**Issues Analyzed:** ${issueCount}  
**Alert Period:** ${period}

---

### Summary

The median schedule variance for the rolling 30-day window has exceeded the alert threshold of ${threshold}%. This indicates that provisional schedules are not accurately predicting actual completion dates.

### Recommended Actions

1. **Review high-variance issues** - Identify patterns in issues with >25% variance
2. **Check estimation accuracy** - Verify if historical durations are representative
3. **Update duration estimates** - Adjust DEFAULT_DURATION_DAYS if needed
4. **Investigate scope/type patterns** - Some label combinations may need separate handling

### Next Steps

- This alert will auto-close when variance drops below ${threshold}% for 7 consecutive days
- If variance persists for 3+ weeks, consider rollback per Stage 2 exit criteria

### Related

- Parent Issue: #83 (Stage 2: Predictive Scheduling Integration)
- Variance calculation: \`scripts/calculate-variance.mjs\`
- Scheduler: \`scripts/schedule-roadmap.mjs\`

---
*Auto-generated by variance monitoring. Last updated: ${new Date().toISOString()}*`
}

/**
 * Create a new variance alert issue.
 */
async function createAlert(variance, issueCount, period) {
    const title = `Schedule Variance Alert - Week ${period}`
    const body = generateAlertBody(variance, issueCount, period)

    const result = await gh(
        `issue create --repo ${REPO_OWNER}/${REPO_NAME} --title "${title}" --body "${body.replace(/"/g, '\\"')}" --label "scope:observability" --label "variance-alert" --label "enhancement"`
    )

    console.log('Created variance alert issue:', result)

    // Track telemetry
    trackVarianceAlert({
        alertType: 'created',
        period,
        variance,
        threshold: 0.25,
        issueCount
    })

    return result
}

/**
 * Update an existing variance alert issue.
 */
async function updateAlert(issueNumber, variance, issueCount, period) {
    const body = generateAlertBody(variance, issueCount, period)

    await gh(`issue edit ${issueNumber} --repo ${REPO_OWNER}/${REPO_NAME} --body "${body.replace(/"/g, '\\"')}"`)

    console.log(`Updated variance alert issue #${issueNumber}`)

    // Track telemetry
    trackVarianceAlert({
        alertType: 'updated',
        period,
        variance,
        threshold: 0.25,
        issueCount
    })
}

/**
 * Close a variance alert issue.
 */
async function closeAlert(issueNumber, reason) {
    await gh(`issue close ${issueNumber} --repo ${REPO_OWNER}/${REPO_NAME} --comment "Variance resolved: ${reason}"`)

    console.log(`Closed variance alert issue #${issueNumber}`)

    // Track telemetry
    trackVarianceAlert({
        alertType: 'closed',
        period: 'resolved',
        variance: 0,
        threshold: 0.25,
        issueCount: 0
    })
}

/**
 * Main logic.
 */
async function main() {
    console.log(`Checking variance alert for period ${period}: ${(variance * 100).toFixed(1)}%`)

    const existingIssue = await findExistingAlert(period)

    if (variance > 0.25) {
        // Variance exceeds threshold - create or update alert
        if (existingIssue) {
            console.log(`Existing alert found: #${existingIssue}`)
            await updateAlert(existingIssue, variance, issueCount, period)
        } else {
            console.log('No existing alert found, creating new one')
            await createAlert(variance, issueCount, period)
        }
    } else {
        // Variance below threshold - close alert if it exists
        if (existingIssue) {
            console.log(`Variance below threshold, closing alert #${existingIssue}`)
            await closeAlert(existingIssue, `Variance dropped to ${(variance * 100).toFixed(1)}%`)
        } else {
            console.log('Variance below threshold, no alert needed')
        }
    }
}

main().catch((err) => {
    console.error(err)
    process.exit(1)
})
